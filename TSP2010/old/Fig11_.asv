% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Paper: M.F.A. Ahmed and S.A. Vorobyov, "Sidelobe Control in Collaborative
% Beamforming WSN.vIa Node Selection," submitted to the IEEE Trans. Signal
% Processing.
% Fig 11 :
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% WSN   : Data structure.
% WSN.M : Number of sensor nodes.
% WSN.R : Cluster radius.
% WSN.x : x coordinates of the sensor node locations.
% WSN.y : y coordinates of the sensor node locations.
% WSN.N :
% WSN.L :
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


% WSN Parameter Set-up
clear;clc;
GeneralWSN
INRthr = 10.^((15:5:30)./10);
APsDirections = [0 -140   70   140]*pi/180;


for K = 1:length(APsDirections) - 2
    for INRcntr = 1:length(INRthr)
        
        WSN.APsDirections = [APsDirections(1:K+1)];
        WSN.K = length(WSN.APsDirections) - 1;
        WSN.INRthr = INRthr(INRcntr);
        WSN.beta = (WSN.NoisePower*WSN.INRthr)/(2*WSN.vX);
        WSN.vI = (  WSN.vX*(1-(1+WSN.beta).*exp(-WSN.beta))  )./ ((1-exp(-WSN.beta)) ) ;
        WSN.vINR = (  WSN.vX*(1-(1+WSN.beta).*exp(-WSN.beta))  )./ (WSN.NoisePower*(1-exp(-WSN.beta)) ) ;
        
        % - - - - - - - - - - - - SIGNAL - - - - - - - - - - - - - - - - -
        S_SL(K,INRcntr) = WSN.SNR*WSN.NoisePower*((WSN.K+1)*WSN.va + (((WSN.K+1)^2)*WSN.N)*WSN.ma^2);
        S_ML(K,INRcntr) = WSN.SNR*WSN.NoisePower*(WSN.va + WSN.N*WSN.ma^2);
        % - - - - - - - - - - - - INTERFERENCE - - - - - - - - - - - - - - - -
        I_ns(K,INRcntr) =  WSN.K*(2*WSN.vI);
        I(K,INRcntr) =  WSN.K*(2*WSN.vX);
        % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        
        
        %- - - - - - - - - - - - - - - - - SIMULATIONS - - - - - - - - -
        
        for itr = 1 : 10
            
            % - - - - - - - - - - - - SL SIGNAL - - - - - - - - - - - - - - - -
            GeneralWSN
            WSN.M = (K+1)*WSN.N;
            WSN = UniformWSN(WSN);
            WSN.ChannelGain = exp(sqrt(WSN.v)*randn(length(WSN.phi),WSN.M));
            WSN.Index = 1:WSN.M;
            clear BPi
            BPi = BeamPattern(WSN);
            ii = find( WSN.phi == WSN.APsDirections(WSN.TargetedAP));
            S_SL_sim_(K,INRcntr,itr) = BPi(ii);
            % - - - - - - - - - - - - ML SIGNAL - - - - - - - - - - - - - - - -
            GeneralWSN
            WSN = UniformWSN(WSN);
            WSN.ChannelGain = exp(sqrt(WSN.v)*randn(length(WSN.phi),WSN.M));
            WSN.Index = 1:WSN.N;
            clear BPi
            BPi = BeamPattern(WSN);
            ii = find( WSN.phi == WSN.APsDirections(WSN.TargetedAP));
            S_ML_sim_(K,INRcntr,itr) = BPi(ii);
            
            
            % - - - - - - - - - - - - INTERFERENCE (No Node selection) - - - -
            
            for k = 1:K
                GeneralWSN
                WSN.ChannelGain = exp(sqrt(WSN.v)*randn(length(WSN.phi),WSN.M));
                WSN = UniformWSN(WSN);
                
                WSN.APsDirections = [APsDirections(1:K+1)];
                WSN.K = length(WSN.APsDirections) - 1;
                WSN.TargetedAP = [k+1];
                WSN.UnTargetedAP = [1:k k+2:K+1];
                WSN.Index = 1:WSN.N;
                clear BPi
                BPi = BeamPattern(WSN);
                
                ii = find( WSN.phi == (WSN.APsDirections(1)));
                BP(k) = BPi(ii);
            end
            
            I_sim_(K,INRcntr,itr) = sum(BP);
            
            
            % - - - - - - - - - - - - INTERFERENCE (Node selection) - - - -
            
            
            for k = 1:K
                GeneralWSN
                WSN.INRthr = INRthr(INRcntr);
                WSN.ChannelGain = exp(sqrt(WSN.v)*randn(length(WSN.phi),WSN.M));
                WSN = UniformWSN(WSN);
                
                WSN.APsDirections = [APsDirections(1:K+1)];
                WSN.K = length(WSN.APsDirections) - 1;
                WSN.TargetedAP = [k+1];
                WSN.UnTargetedAP = [1:k k+2:K+1];
                WSN = NodeSelection(WSN);
                clear BPi
                BPi = BeamPattern(WSN);
                
                ii = find( WSN.phi == (WSN.APsDirections(1)));
                BP(k) = BPi(ii);
            end
            
            I_ns_sim_(K,INRcntr,itr)=sum(BP);
            
            
            [K INRcntr itr]
            
            
        end
        
        S_SL_sim = mean(S_SL_sim_,3);
        S_ML_sim = mean(S_ML_sim_,3);
        I_sim = mean(I_sim_,3);
        I_ns_sim = mean(I_ns_sim_,3);
        
        
        
    end
    
    
    
    
end



figure
hold on
grid on
box('on');
xlabel('\eta_{thr} [dB]');

plot(10*log10(INRthr),10*log10(S_SL./WSN.NoisePower),'g-.')
plot(10*log10(INRthr),10*log10(S_ML./WSN.NoisePower),'b-.')
plot(10*log10(INRthr),10*log10(I./WSN.NoisePower),'k-.')
plot(10*log10(INRthr),10*log10(I_ns./WSN.NoisePower),'r-.')


plot(10*log10(INRthr),10*log10(S_SL_sim./WSN.NoisePower),'go')
plot(10*log10(INRthr),10*log10(S_ML_sim./WSN.NoisePower),'bo')
plot(10*log10(INRthr),10*log10(I_sim./WSN.NoisePower),'ko')
plot(10*log10(INRthr),10*log10(I_ns_sim./WSN.NoisePower),'ro')
