% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Paper: M.F.A. Ahmed and S.A. Vorobyov, "Sidelobe Control in Collaborative
% Beamforming WSN.vIa Node Selection," submitted to the IEEE Trans. Signal
% Processing.
% Fig 11 :
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% WSN   : Data structure.
% WSN.M : Number of sensor nodes.
% WSN.R : Cluster radius.
% WSN.x : x coordinates of the sensor node locations.
% WSN.y : y coordinates of the sensor node locations.
% WSN.N :
% WSN.L :
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


% WSN Parameter Set-up
clear;clc;
GeneralWSN    
WSN.INRthr = 10.^((0:5:30)./10);
% - - - - - - - - - - - - SIGNAL - - - - - - - - - - - - - - - - -
S_SL = SNR*NoisePower*((K+1)*va + (((K+1)^2)*N)*ma^2);
S_ML = SNR*NoisePower*(va + N*ma^2);
% - - - - - - - - - - - - INTERFERENCE - - - - - - - - - - - - - - - -
I_ns =  K*2*vI;% + (K*2*vI).^2 ;
I =  K*2*vX;% + (K*2*vX)^2 ;

% %- - - - - - - - - - - - - - - - - SIMULATIONS - - - - - - - - - - - - -


for INRcntr = 1 : length(INRthr)
    for cntr = 1 : 30
        
        
        % - - - - - - - - - - - - SL SIGNAL - - - - - - - - - - - - - - - -
        GeneralWSN
        WSN.M = (WSN.K+1)*WSN.N;
        WSN = UniformWSN(WSN);
        WSN.ChannelGain = exp(sqrt(WSN.v)*randn(length(WSN.phi),WSN.M));
        WSN.Index = 1:WSN.M;
        WSN.phi = (WSN.APsDirections(WSN.TargetedAP));
        S_SL_sim_(cntr) = BeamPattern(WSN);
        
        % - - - - - - - - - - - - ML SIGNAL - - - - - - - - - - - - - - - -
        GeneralWSN
        WSN = UniformWSN(WSN);
        WSN.ChannelGain = exp(sqrt(WSN.v)*randn(length(WSN.phi),WSN.M));
        WSN.Index = 1:WSN.N;
        WSN.phi = (WSN.APsDirections(WSN.TargetedAP));
        S_ML_sim_(cntr) = BeamPattern(WSN);
        
        
        % - - - - - - - - - - - - INTERFERENCE (No Node selection) - - - -
        GeneralWSN
        WSN = UniformWSN(WSN);
        WSN.ChannelGain = exp(sqrt(WSN.v)*randn(length(WSN.phi),WSN.M));
        WSN.Index = 1:WSN.N;
        ii = find( WSN.phi == WSN.APsDirections(WSN.UnTargetedAP));
        BP = BeamPattern(WSN);
        I_sim_(cntr) = BP(ii);
        
        % - - - - - - - - - - - - INTERFERENCE (Node selection) - - - -
        GeneralWSN
        WSN.INRthr = INRthr(INRcntr);
        WSN = UniformWSN(WSN);
        WSN.ChannelGain = exp(sqrt(WSN.v)*randn(length(WSN.phi),WSN.M));
        WSN = NodeSelection(WSN);
        ii = find( WSN.phi == WSN.APsDirections(WSN.UnTargetedAP));
        BP = BeamPattern(WSN);
        I_ns_sim_(cntr) = BP(ii);
        
        
        
        [INRcntr cntr]
        
    end
    
    S_SL_sim(INRcntr)= mean(S_SL_sim_);
    S_ML_sim(INRcntr) = mean(S_ML_sim_);
    I_sim(INRcntr) = mean(I_sim_);
    I_ns_sim(INRcntr) = mean(I_ns_sim_);
    
end
%
%


figure
hold on
grid on
box('on');
xlabel('\eta_{thr} [dB]');

plot(10*log10(INRthr),10*log10(ones(1,length(INRthr))*S_SL./NoisePower),'g-.')
plot(10*log10(INRthr),10*log10(ones(1,length(INRthr))*S_ML./NoisePower),'b-.')
plot(10*log10(INRthr),10*log10(ones(1,length(INRthr))*I./NoisePower),'k-.')
plot(10*log10(INRthr),10*log10(I_ns./NoisePower),'r-.')

plot(10*log10(INRthr),10*log10(S_SL_sim./WSN.NoisePower),'go')
plot(10*log10(INRthr),10*log10(S_ML_sim./WSN.NoisePower),'bo')
plot(10*log10(INRthr),10*log10(I_sim./WSN.NoisePower),'ko')
plot(10*log10(INRthr),10*log10(I_ns_sim./WSN.NoisePower),'ro')
